exit
c
:Y
board[1][1]
board
play
exit
play
c
exit
play.board
game.place(1,1,:Y)
game.place
place
c
exit
game.board[1][1]
game.board
c
game.methods.sort
exit
game.methods.sort
exit
self.methods.sort
self.board
self.@board
@board
exit
position(1,2)
exit
TicTacToe.new.board[1][1]
TicTacToe.new.board(1,1)
TicTacToe.new.board(x,y)
TicTacToe.new.board[1][1] = :x
TicTacToe.new.board[1][1]
exit
 @board = Array.new(3) { Array.new(3) }[2][1]
 @board = Array.new(3) { Array.new(3) }[3][1]
 @board = Array.new(3) { Array.new(3) }[3][3]
 @board = Array.new(3) { Array.new(3) }[1][3]
 @board = Array.new(3) { Array.new(3) }[1][1]
 @board = Array.new(3) { Array.new(3) }
exit
game = TicTacToe.new(:O, :O)
game = TicTacToe.new(:X, :X)
=> 19:     expect {game = TicTacToe.new(:X, :X)}
=> 19:     expect {game = TicTacToe.new(:X, :X)}.to raise_error("Tokens cannot be the same.")
=> 19:     expect {game = TicTacToe.new(:O, :O)}.to raise_error("Tokens cannot be the same.")
raise_error
exit
game = TicTacToe.new(:X, :O)
exit
game = TicTacToe.new(:X, :O)
exit
game = TicTacToe.new(:X, :O)
exit
game = TicTacToe.new(:X, :O)
exit
game = TicTacToe.new(:X, :O)
exit
game = TicTacToe.new(:X, :O)
